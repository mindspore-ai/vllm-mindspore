# SPDX-License-Identifier: Apache-2.0
# SPDX-FileCopyrightText: Copyright contributors to the vLLM project
exclude: ^(codecheck_toolkits/)
repos:
- repo: local
  hooks:
    - id: pre-run-shell
      name: "Pre-run: copy codecheck_toolkits/pyproject.toml to ./"
      entry: ln -s codecheck_toolkits/pyproject.toml pyproject.toml
      language: system
      stages: [ pre-commit ]
      always_run: true
      pass_filenames: false
- repo: https://gitee.com/moran3/yapf
  rev: v0.43.0
  hooks:
  - id: yapf
    args: [--in-place, --verbose]
    # Keep the same list from yapfignore here to avoid yapf failing without any inputs
    exclude: '(.buildkite|benchmarks|build|examples)/.*'
- repo: https://gitee.com/moran3/ruff-pre-commit
  rev: v0.11.7
  hooks:
  - id: ruff
    args: [--output-format, github, --fix]
  - id: ruff-format
    files: ^(.buildkite|benchmarks|examples)/.*
- repo: https://gitee.com/moran3/codespell
  rev: v2.4.1
  hooks:
  - id: codespell
    additional_dependencies: ['tomli']
    args: ['--skip', '*.c,*cpp,*.h']
- repo: https://gitee.com/moran3/isort
  rev: 6.0.1
  hooks:
  - id: isort
    exclude: ^(examples/|tests/|vllm_mindspore/__init__.py)
- repo: https://gitee.com/moran3/mirrors-clang-format
  rev: v20.1.3
  hooks:
  - id: clang-format
    exclude: 'csrc/(moe/topk_softmax_kernels.cu|quantization/gguf/(ggml-common.h|dequantize.cuh|vecdotq.cuh|mmq.cuh|mmvq.cuh))|vllm/third_party/.*'
    types_or: [c++, cuda]
    args: [--style=file, --verbose]
- repo: https://gitee.com/moran3/pymarkdown
  rev: v0.9.29
  hooks:
  - id: pymarkdown
    exclude: '.*\.inc\.md|.gitee/'
    args: [fix]
- repo: https://gitee.com/moran3/uv-pre-commit
  rev: 0.6.17
  hooks:
    - id: pip-compile
      args: [requirements/test.in, -o, requirements/test.txt, --index-strategy, unsafe-best-match, --torch-backend, cu128]
      files: ^requirements/test\.(in|txt)$
- repo: local
  hooks:
  - id: mypy-3.9 # TODO: Use https://github.com/pre-commit/mirrors-mypy when mypy setup is less awkward
    name: Run mypy for Python 3.9
    entry: codecheck_toolkits/mypy.sh "3.9"
    language: python
    types: [python]
    additional_dependencies: &mypy_deps [mypy==1.11.1, types-cachetools, types-setuptools, types-PyYAML, types-requests, pydantic]
  - id: mypy-3.10 # TODO: Use https://github.com/pre-commit/mirrors-mypy when mypy setup is less awkward
    name: Run mypy for Python 3.10
    entry: codecheck_toolkits/mypy.sh "3.10"
    language: python
    types: [python]
    additional_dependencies: *mypy_deps
  - id: mypy-3.11 # TODO: Use https://github.com/pre-commit/mirrors-mypy when mypy setup is less awkward
    name: Run mypy for Python 3.11
    entry: codecheck_toolkits/mypy.sh "3.11"
    language: python
    types: [python]
    additional_dependencies: *mypy_deps
  - id: mypy-3.12 # TODO: Use https://github.com/pre-commit/mirrors-mypy when mypy setup is less awkward
    name: Run mypy for Python 3.12
    entry: codecheck_toolkits/mypy.sh "3.12"
    language: python
    types: [python]
    additional_dependencies: *mypy_deps
  - id: shellcheck
    name: Lint shell scripts
    entry: codecheck_toolkits/shellcheck.sh
    language: script
    types: [shell]
  - id: png-lint
    name: Lint PNG exports from excalidraw
    entry: codecheck_toolkits/png-lint.sh
    language: script
    types: [png]
  - id: signoff-commit
    name: Sign-off Commit
    entry: bash
    args:
      - -c
      - |
        if ! grep -q "^Signed-off-by: $(git config user.name) <$(git config user.email)>" "$(git rev-parse --git-path COMMIT_EDITMSG)"; then
          printf "\nSigned-off-by: $(git config user.name) <$(git config user.email)>\n" >> "$(git rev-parse --git-path COMMIT_EDITMSG)"
        fi
    language: system
    verbose: true
    stages: [commit-msg]
  - id: check-spdx-header
    name: Check SPDX headers
    entry: python codecheck_toolkits/check_spdx_header.py
    language: python
    types: [python]
  - id: check-filenames
    name: Check for spaces in all filenames
    entry: bash
    args:
      - -c
      - 'git ls-files | grep " " && echo "Filenames should not contain spaces!" && exit 1 || exit 0'
    language: system
    always_run: true
    pass_filenames: false
  - id: update-dockerfile-graph
    name: Update Dockerfile dependency graph
    entry: codecheck_toolkits/update-dockerfile-graph.sh
    language: script
  - id: enforce-import-regex-instead-of-re
    name: Enforce import regex as re
    entry: python codecheck_toolkits/enforce_regex_import.py
    language: python
    types: [python]
    pass_filenames: false
    additional_dependencies: [regex]
  # forbid directly import triton
  - id: forbid-direct-triton-import
    name: "Forbid direct 'import triton'"
    entry: python codecheck_toolkits/check_triton_import.py
    language: python
    types: [python]
    pass_filenames: false
    additional_dependencies: [regex]
  # remove cache file
  - id: remove cache
    name: "remove ruff, mypy, shellcheck cache"
    entry: rm -rf .ruff_cache/ .mypy_cache/ shellcheck-stable/
    language: system
    stages: [ pre-commit ]
    always_run: true
    pass_filenames: false
  # Keep `suggestion` last
  - id: suggestion
    name: Suggestion
    entry: bash -c 'echo "To bypass pre-commit hooks, add --no-verify to git commit."'
    language: system
    verbose: true
    pass_filenames: false
  - id: post-run-shell
    name: "Post-run: remove ./pyproject.toml"
    entry: rm -f pyproject.toml
    language: system
    stages: [ pre-commit ]
    always_run: true
    pass_filenames: false
  # Insert new entries above the `suggestion` entry
